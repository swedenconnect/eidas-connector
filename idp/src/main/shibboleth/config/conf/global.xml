<?xml version="1.0" encoding="UTF-8"?>
<beans xmlns="http://www.springframework.org/schema/beans"
       xmlns:context="http://www.springframework.org/schema/context"
       xmlns:task="http://www.springframework.org/schema/task"
       xmlns:util="http://www.springframework.org/schema/util"
       xmlns:p="http://www.springframework.org/schema/p"
       xmlns:c="http://www.springframework.org/schema/c"
       xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance"
       xsi:schemaLocation="http://www.springframework.org/schema/beans http://www.springframework.org/schema/beans/spring-beans.xsd
                           http://www.springframework.org/schema/context http://www.springframework.org/schema/context/spring-context.xsd
                           http://www.springframework.org/schema/util http://www.springframework.org/schema/util/spring-util.xsd
                           http://www.springframework.org/schema/task http://www.springframework.org/schema/task/spring-task-4.0.xsd"
                           
       default-init-method="initialize"
       default-destroy-method="destroy">
       
  <bean id="localeResolver" class="org.springframework.web.servlet.i18n.CookieLocaleResolver"
    p:cookieName="idpUiLanguage"
    p:cookieDomain="%{idp.cookie.domain:}"
    p:cookieHttpOnly="%{idp.cookie.httpOnly:true}"
    p:cookieSecure="%{idp.cookie.secure:false}"
    p:cookiePath="%{idp.cookie.path:}"
    p:cookieMaxAge="%{idp.cookie.maxAge:31536000}"
    p:defaultLocale="sv" />       
    
  <task:scheduler id="eidas.Scheduler" pool-size="5" />
  
  <task:scheduled-tasks scheduler="eidas.Scheduler">
    <task:scheduled ref="eidas.MetadataConfig" method="recache" fixed-delay="600000" initial-delay="3000" />
  </task:scheduled-tasks>
              
  <!-- eIDAS metadata -->
  <bean id="eidas.MetadataConfig" class="se.elegnamnden.eidas.metadataconfig.MetadataConfig" scope="singleton" depends-on="shibboleth.OpenSAMLConfig"
    c:dataDirectory="%{idp.metadata.eidas.cache-directory}"
    c:metadataListUrl="%{idp.metadata.eidas.service-list.url}"
    c:metadataListCertFile="%{idp.metadata.eidas.service-list.validation-certificate}"
    c:metadataUrl="%{idp.metadata.eidas.federation.url}"
    c:metadataCertFile="%{idp.metadata.eidas.federation.validation-certificate}"
    c:mwParamList-ref="eidas.mwParamList" 
    p:ignoreSignatureValidation="%{idp.metadata.eidas.ignore-signature-validation:false}" />
    
  <util:list id="eidas.mwParamList">
    <bean class="se.elegnamnden.eidas.metadataconfig.data.MiddleWareParams"
      c:entityID="https://demw.eidastest.se" c:serviceUrlPrefix="https://demw.eidastest.se" />
  </util:list>
      
  <!-- Connector services -->
      
  <bean id="eidas.EidasAuthnContextService" class="se.elegnamnden.eidas.idp.connector.service.EidasAuthnContextServiceImpl" scope="singleton"
    p:flowName="authn/External"
    p:authnContextweightMap-ref="shibboleth.AuthenticationPrincipalWeightMap"
    p:loaMappings-ref="eidas.LevelOfAssuranceMappings" />
          
  <bean id="eidas.SignSupportService" class="se.litsec.shibboleth.idp.authn.service.impl.SignSupportServiceImpl" scope="singleton"
      p:authnContextService-ref="eidas.EidasAuthnContextService"
      p:signatureSupportKeyService-ref="sweid.SignatureServiceSupportService"
      p:entityID="%{idp.entityID}"
      p:scal2Supported="%{idp.scal2.support:false}">
      
   <property name="signMessagePreProcessor">
    <bean class="se.elegnamnden.eidas.idp.connector.service.TextSignMessagePreProcessor" />
   </property>
    
    <property name="supportedMimeTypes">
      <list>
        <value>text</value>
      </list>
    </property>
    <property name="sadFactory">
      <bean class="se.litsec.swedisheid.opensaml.saml2.signservice.SADFactory"
        c:idpEntityID="%{idp.entityID}"
        p:validityTime="%{idp.signature-support.sad.validity-time:300}" 
        p:userIdAttributeName="%{idp.signature-support.sad.userid-attribute-name}"
        p:jwtIdSize="%{idp.signature-support.sad.id-size:24}"
        p:jwtSigningAlgorithm="%{idp.signature-support.sad.jwt-signing-algorithm:RS256}">
        <constructor-arg name="signingCredential"><null /></constructor-arg>
      </bean>    
    </property>      
  </bean>
  
  <bean id="eidas.LevelOfAssuranceMappings" class="se.elegnamnden.eidas.mapping.loa.StaticLevelOfAssuranceMappings" scope="singleton" />
  
  <bean id="eidas.AttributeProcessingService" class="se.elegnamnden.eidas.idp.connector.service.AttributeProcessingServiceImpl" scope="singleton">
    <property name="attributeMappings">
      <bean class="se.elegnamnden.eidas.mapping.attributes.impl.NaturalPersonStaticAttributeMappings" />
    </property>
    <property name="attributeAuthority" ref="eidas.AttributeAuthority" />
  </bean>
  
  <bean id="eidas.AttributeAuthority" class="se.elegnamnden.eidas.idp.connector.aaclient.AttributeAuthorityImpl" scope="singleton"
    p:pridService-ref="eidas.PridService" />
      
  <bean id="eidas.PridService" class="se.elegnamnden.eidas.idp.connector.aaclient.prid.PridServiceImpl" scope="singleton"
    p:pridServiceUrl="%{idp.prid-service.url}"
    p:develMode="%{idp.devel.mode}" />
    
  <!-- Connector SP -->
  
  <!-- TODO: move the connector SP into a reloadable Spring subsystem so that we get support for reloading of keys etc. -->
      
  <bean id="eidas.AuthnRequestGenerator" class="se.elegnamnden.eidas.idp.connector.sp.impl.EidasAuthnRequestGeneratorImpl" scope="singleton"
    c:entityID="%{idp.sp.entityID}" 
    p:name="%{idp.sp.name}"
    p:signingCredentials-ref="eidas.SpSigningCredential">
    <property name="config">
      <bean class="se.elegnamnden.eidas.idp.connector.sp.impl.AuthnRequestGeneratorConfig"
        p:includeSpType="%{idp.sp.request.include-sptype:true}" 
        p:preferredBinding="%{idp.sp.request.preferred-binding:urn:oasis:names:tc:SAML:2.0:bindings:HTTP-POST}" />
    </property>
  </bean>
    
  <bean id="eidas.ResponseProcessor" class="se.elegnamnden.eidas.idp.connector.sp.impl.ResponseProcessorImpl" scope="singleton"
    p:decrypter-ref="eidas.Decrypter"
    p:messageReplayChecker-ref="eidas.MessageReplayChecker"  
    p:responseValidationSettings-ref="eidas.ResponseValidationSettings" />
    
  <bean id="eidas.ResponseValidationSettings" class="se.elegnamnden.eidas.idp.connector.sp.ResponseValidationSettings" scope="singleton"
    p:strictValidation="%{idp.sp.strict-validation:false}"
    p:requireSignedAssertions="%{idp.sp.metadata.wantAssertionsSigned}"
    p:maxAgeResponse="%{idp.sp.response.validation-settings.max-age-response:180000}"
    p:allowedClockSkew="%{idp.sp.response.validation-settings.allowed-clock-skew:30000}"
    p:maxSessionAge="%{idp.authn.defaultLifetime:PT60M}" />
        
  <bean id="eidas.MessageReplayChecker" class="se.litsec.opensaml.saml2.common.response.MessageReplayCheckerImpl" scope="singleton"
    p:replayCache-ref="shibboleth.ReplayCache"
    p:replayCacheExpiration="%{idp.policy.messageLifetime:PT5M}"
    p:replayCacheName="eidas-sp-replaycache" />
  
  <bean id="eidas.SpSigningCredential" class="net.shibboleth.idp.profile.spring.factory.BasicX509CredentialFactoryBean"
    p:privateKeyResource="%{idp.sp.signing.key}"
    p:certificateResource="%{idp.sp.signing.cert}"
    p:entityId="%{idp.sp.entityID}" />  
    
  <util:list id="eidas.SpEncryptionCredentials">
    <bean class="net.shibboleth.idp.profile.spring.factory.BasicX509CredentialFactoryBean"
      p:privateKeyResource="%{idp.sp.encryption.key}"
      p:certificateResource="%{idp.sp.encryption.cert}"
      p:entityId="%{idp.sp.entityID}" />  
  </util:list>
  
  <bean id="eidas.Decrypter" class="se.litsec.opensaml.xmlsec.SAMLObjectDecrypter" scope="singleton">
    <constructor-arg name="decryptionConfiguration">
      <bean parent="shibboleth.BasicDecryptionConfiguration"
        p:KEKKeyInfoCredentialResolver-ref="eidas.KeyEncryptionCredentialResolver"
        p:encryptedKeyResolver-ref="eidas.EncryptedKeyResolver" />
    </constructor-arg>
  </bean>
  
  <bean id="eidas.KeyEncryptionCredentialResolver" class="org.opensaml.xmlsec.keyinfo.impl.ChainingKeyInfoCredentialResolver">
    <constructor-arg>
      <list>
        <bean class="org.opensaml.xmlsec.keyinfo.impl.LocalKeyInfoCredentialResolver">
          <constructor-arg name="localCredentialResolver">
            <bean class="org.opensaml.xmlsec.keyinfo.impl.CollectionKeyInfoCredentialResolver"
              c:credentials-ref="eidas.SpEncryptionCredentials" />
          </constructor-arg>
          <constructor-arg name="keyInfoProviders">
            <list>
              <bean class="org.opensaml.xmlsec.keyinfo.impl.provider.RSAKeyValueProvider" />
              <bean class="org.opensaml.xmlsec.keyinfo.impl.provider.DSAKeyValueProvider" />
              <bean class="org.opensaml.xmlsec.keyinfo.impl.provider.DEREncodedKeyValueProvider" />
              <bean class="org.opensaml.xmlsec.keyinfo.impl.provider.InlineX509DataProvider" />
            </list>
          </constructor-arg>
        </bean>
        <bean class="org.opensaml.xmlsec.keyinfo.impl.StaticKeyInfoCredentialResolver"
          c:credentials-ref="eidas.SpEncryptionCredentials" />
      </list>
    </constructor-arg>
  </bean>
  
  <bean id="eidas.EncryptedKeyResolver" class="org.opensaml.xmlsec.encryption.support.ChainingEncryptedKeyResolver" c:recipient="%{idp.sp.entityID}">
    <constructor-arg name="encKeyResolvers">
      <list>
        <bean class="org.opensaml.xmlsec.encryption.support.InlineEncryptedKeyResolver" />
        <bean class="org.opensaml.saml.saml2.encryption.EncryptedElementTypeEncryptedKeyResolver" />
        <bean class="org.opensaml.xmlsec.encryption.support.SimpleRetrievalMethodEncryptedKeyResolver" />
        <bean class="org.opensaml.xmlsec.encryption.support.SimpleKeyInfoReferenceEncryptedKeyResolver" />
      </list>
    </constructor-arg>
  </bean>  
  
  <!-- Redis - lazy init -->
  <import resource="storage-redis.xml" />
          
</beans>
