<?xml version="1.0" encoding="UTF-8"?>
<beans xmlns="http://www.springframework.org/schema/beans"
       xmlns:context="http://www.springframework.org/schema/context"
       xmlns:task="http://www.springframework.org/schema/task"
       xmlns:util="http://www.springframework.org/schema/util"
       xmlns:p="http://www.springframework.org/schema/p"
       xmlns:c="http://www.springframework.org/schema/c"
       xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance"
       xsi:schemaLocation="http://www.springframework.org/schema/beans http://www.springframework.org/schema/beans/spring-beans.xsd
                           http://www.springframework.org/schema/context http://www.springframework.org/schema/context/spring-context.xsd
                           http://www.springframework.org/schema/util http://www.springframework.org/schema/util/spring-util.xsd
                           http://www.springframework.org/schema/task http://www.springframework.org/schema/task/spring-task-4.0.xsd"
                           
       default-init-method="initialize"
       default-destroy-method="destroy">
       
  <bean id="localeResolver" class="org.springframework.web.servlet.i18n.CookieLocaleResolver"
    p:cookieName="idpUiLanguage"
    p:cookieDomain="%{idp.cookie.domain:}"
    p:cookieHttpOnly="%{idp.cookie.httpOnly:true}"
    p:cookieSecure="%{idp.cookie.secure:false}"
    p:cookiePath="%{idp.cookie.path:}"
    p:cookieMaxAge="%{idp.cookie.maxAge:31536000}"
    p:defaultLocale="sv" />       
    
  <task:scheduler id="eidas.Scheduler" pool-size="5" />
  
  <task:scheduled-tasks scheduler="eidas.Scheduler">
    <!-- <task:scheduled ref="eidas.MetadataConfig" method="recache" fixed-delay="600000" initial-delay="3000" /> -->
    <task:scheduled ref="eidas.euMetadata" method="refresh" fixed-delay="600000" initial-delay="3000" />
  </task:scheduled-tasks>
  
  <!-- Credentials declarations -->
  <bean id="cred.base" class="se.elegnamnden.eidas.idp.connector.credential.CredentialsConfiguration" abstract="true"
    p:entityId="%{idp.entityID}" />
    
  <bean id="cred.idp.signing" parent="cred.base" scope="singleton"
    p:certificateResource="%{idp.signing.cert}"
    p:privateKeyResource="%{idp.signing.key:%{idp.home}/conf/credentials/dummy.key}"
    p:alias="%{idp.signing.pkcs11.alias:}"
    p:pkcs11Config="%{idp.signing.pkcs11.cfg:}" />
    
  <bean id="cred.idp.encryption" parent="cred.base" scope="singleton"
    p:certificateResource="%{idp.encryption.cert}"
    p:privateKeyResource="%{idp.encryption.key:%{idp.home}/conf/credentials/dummy.key}"
    p:alias="%{idp.encryption.pkcs11.alias:}"
    p:pkcs11Config="%{idp.encryption.pkcs11.cfg:}" />
    
  <bean id="cred.sp.signing" parent="cred.base" scope="singleton"
    p:entityId="%{idp.sp.entityID}"
    p:certificateResource="%{idp.sp.signing.cert}"
    p:privateKeyResource="%{idp.sp.signing.key:%{idp.home}/conf/credentials/dummy.key}"
    p:alias="%{idp.sp.signing.pkcs11.alias:}"
    p:pkcs11Config="%{idp.sp.signing.pkcs11.cfg:}" />
    
  <bean id="cred.sp.encryption" parent="cred.base" scope="singleton"
    p:entityId="%{idp.sp.entityID}"
    p:certificateResource="%{idp.sp.encryption.cert}"
    p:privateKeyResource="%{idp.sp.encryption.key:%{idp.home}/conf/credentials/dummy.key}"
    p:alias="%{idp.sp.encryption.pkcs11.alias:}"
    p:pkcs11Config="%{idp.sp.encryption.pkcs11.cfg:}" />
    
  <bean id="cred.idp.metadata-signing" parent="cred.base" scope="singleton"
    p:certificateResource="%{idp.metadata.signing.cert}"
    p:privateKeyResource="%{idp.metadata.signing.key:%{idp.home}/conf/credentials/dummy.key}"
    p:alias="%{idp.metadata.signing.pkcs11.alias:}"
    p:pkcs11Config="%{idp.metadata.signing.pkcs11.cfg:}" />
    
  <bean id="cred.sp.metadata-signing" parent="cred.base" scope="singleton"
    p:entityId="%{idp.sp.entityID}"
    p:certificateResource="%{idp.sp.metadata.signing.cert}"
    p:privateKeyResource="%{idp.sp.metadata.signing.key:%{idp.home}/conf/credentials/dummy.key}"
    p:alias="%{idp.sp.metadata.signing.pkcs11.alias:}"
    p:pkcs11Config="%{idp.sp.metadata.signing.pkcs11.cfg:}" />
  
  <bean id="pkcs11Configuration" class="se.elegnamnden.eidas.idp.connector.credential.pkcs11.ExtendedPKCS11Configuration" scope="singleton"
    c:pkcs11enabled="%{idp.pkcs11.enabled:false}" 
    c:softHsmEnabled="%{idp.pkcs11.softhsm.enabled:false}"
    c:idpMetadataSigningEnabled="%{idp.metadata.signing.pkcs11.enabled:false}"
    c:spMetadataSigningEnabled="%{idp.sp.metadata.signing.pkcs11.enabled:false}"
    p:pkcs11pin="%{idp.pkcs11.pin:}"
    p:softHsmLib="/usr/lib/softhsm/libsofthsm2.so"
    p:pkcs11label="connector"
    p:pkcs11slot="0"
    p:idpSigningCredential-ref="cred.idp.signing"
    p:idpEncryptionCredential-ref="cred.idp.encryption"
    p:spSigningCredential-ref="cred.sp.signing"
    p:spEncryptionCredential-ref="cred.sp.encryption"
    p:idpMetadataSigningCredential-ref="cred.idp.metadata-signing"
    p:spMetadataSigningCredential-ref="cred.sp.metadata-signing" />
    
  <bean id="shibboleth.AbstractConnectorCredential" class="se.elegnamnden.eidas.idp.connector.credential.ConnectorCredentialFactoryBean" abstract="true"
    p:pkcs11enabled="%{idp.pkcs11.enabled:false}" p:pkcs11Configuration-ref="pkcs11Configuration" />    
    
  <!-- EU metadata -->   
  <bean id="eidas.euMetadata" class="se.elegnamnden.eidas.idp.metadata.MdslAggregatedEuMetadata" scope="singleton" depends-on="shibboleth.OpenSAMLConfig"
    p:cacheDirectory="%{idp.metadata.eidas.cache-directory}"
    p:euMetadataUrl="%{idp.metadata.eidas.federation.url}"
    p:euMetadataValidationCertificate="%{idp.metadata.eidas.federation.validation-certificate}"
    p:mdslUrl="%{idp.metadata.eidas.service-list.url:#{null}}"
    p:mdslValidationCertificate="%{idp.metadata.eidas.service-list.validation-certificate:#{null}}"
    p:ignoreSignatureValidation="%{idp.metadata.eidas.ignore-signature-validation:false}" />

      
  <!-- Connector services -->
      
  <bean id="eidas.EidasAuthnContextService" class="se.elegnamnden.eidas.idp.connector.service.EidasAuthnContextServiceImpl" scope="singleton"
    p:flowName="authn/External"
    p:authnContextweightMap-ref="shibboleth.AuthenticationPrincipalWeightMap"
    p:loaMappings-ref="eidas.LevelOfAssuranceMappings" />
          
  <bean id="eidas.SignSupportService" class="se.litsec.shibboleth.idp.authn.service.impl.SignSupportServiceImpl" scope="singleton"
      p:authnContextService-ref="eidas.EidasAuthnContextService"
      p:signatureSupportKeyService-ref="sweid.SignatureServiceSupportService"
      p:entityID="%{idp.entityID}"
      p:scal2Supported="%{idp.scal2.support:false}">
      
   <property name="signMessagePreProcessor">
    <bean class="se.elegnamnden.eidas.idp.connector.service.TextSignMessagePreProcessor" />
   </property>
    
    <property name="supportedMimeTypes">
      <list>
        <value>text</value>
      </list>
    </property>
    <property name="sadFactory">
      <bean class="se.litsec.swedisheid.opensaml.saml2.signservice.SADFactory"
        c:idpEntityID="%{idp.entityID}"
        p:validityTime="%{idp.signature-support.sad.validity-time:300}" 
        p:userIdAttributeName="%{idp.signature-support.sad.userid-attribute-name}"
        p:jwtIdSize="%{idp.signature-support.sad.id-size:24}"
        p:jwtSigningAlgorithm="%{idp.signature-support.sad.jwt-signing-algorithm:RS256}">
        <constructor-arg name="signingCredential"><null /></constructor-arg>
      </bean>    
    </property>      
  </bean>
  
  <bean id="eidas.LevelOfAssuranceMappings" class="se.elegnamnden.eidas.mapping.loa.StaticLevelOfAssuranceMappings" scope="singleton" />
  
  <bean id="eidas.AttributeProcessingService" class="se.elegnamnden.eidas.idp.connector.service.AttributeProcessingServiceImpl" scope="singleton">
    <property name="attributeMappings">
      <bean class="se.elegnamnden.eidas.mapping.attributes.impl.NaturalPersonStaticAttributeMappings" />
    </property>
    <property name="attributeAuthority" ref="eidas.AttributeAuthority" />
  </bean>
  
  <bean id="eidas.AttributeAuthority" class="se.elegnamnden.eidas.idp.connector.aaclient.AttributeAuthorityImpl" scope="singleton"
    p:pridService-ref="eidas.PridService" />
      
  <bean id="eidas.PridService" class="se.elegnamnden.eidas.idp.connector.aaclient.prid.PridServiceImpl" scope="singleton"
    p:pridServiceUrl="%{idp.prid-service.url}"
    p:develMode="%{idp.devel.mode}" />
    
  <!-- Connector SP -->
  
  <bean id="bouncyCastleProviderBean" class="se.elegnamnden.eidas.idp.config.BouncyCastleInitializer" scope="singleton"
    depends-on="shibboleth.OpenSAMLConfig" lazy-init="true" />
  
  <!-- Security configuration for the SP -->
  <bean id="eidas.RelaxedEidasSecurityConfiguration" class="se.litsec.eidas.opensaml.xmlsec.RelaxedEidasSecurityConfiguration" 
    scope="singleton" depends-on="bouncyCastleProviderBean" lazy-init="true" />
    
  <bean id="eidas.EidasSecurityConfiguration" class="se.litsec.eidas.opensaml.xmlsec.EidasSecurityConfiguration" 
    scope="singleton" depends-on="bouncyCastleProviderBean" lazy-init="true" />
    
  <alias alias="eidas.SpSecurityConfiguration" name="%{idp.sp.security-config-bean:eidas.RelaxedEidasSecurityConfiguration}" />
  
  <!-- TODO: move the connector SP into a reloadable Spring subsystem so that we get support for reloading of keys etc. -->
      
  <bean id="eidas.AuthnRequestGenerator" class="se.elegnamnden.eidas.idp.connector.sp.impl.EidasAuthnRequestGeneratorImpl" scope="singleton"
    c:entityID="%{idp.sp.entityID}" 
    p:name="%{idp.sp.name}"
    p:signingCredentials-ref="eidas.SpSigningCredential">
    <property name="config">
      <bean class="se.elegnamnden.eidas.idp.connector.sp.impl.AuthnRequestGeneratorConfig"
        p:spSecurityConfiguration-ref="eidas.SpSecurityConfiguration"
        p:includeSpType="%{idp.sp.request.include-sptype:true}" 
        p:preferredBinding="%{idp.sp.request.preferred-binding:urn:oasis:names:tc:SAML:2.0:bindings:HTTP-POST}" />
    </property>
  </bean>
    
  <bean id="eidas.ResponseProcessor" class="se.elegnamnden.eidas.idp.connector.sp.impl.ResponseProcessorImpl" scope="singleton"
    p:decrypter-ref="eidas.Decrypter"
    p:spSecurityConfiguration-ref="eidas.SpSecurityConfiguration"
    p:messageReplayChecker-ref="eidas.MessageReplayChecker"  
    p:responseValidationSettings-ref="eidas.ResponseValidationSettings" />
    
  <bean id="eidas.ResponseValidationSettings" class="se.elegnamnden.eidas.idp.connector.sp.ResponseValidationSettings" scope="singleton"
    p:strictValidation="%{idp.sp.strict-validation:false}"
    p:requireSignedAssertions="%{idp.sp.metadata.wantAssertionsSigned}"
    p:maxAgeResponse="%{idp.sp.response.validation-settings.max-age-response:180000}"
    p:allowedClockSkew="%{idp.sp.response.validation-settings.allowed-clock-skew:30000}"
    p:maxSessionAge="%{idp.authn.defaultLifetime:PT60M}" />
        
  <bean id="eidas.MessageReplayChecker" class="se.litsec.opensaml.saml2.common.response.MessageReplayCheckerImpl" scope="singleton"
    p:replayCache-ref="shibboleth.ReplayCache"
    p:replayCacheExpiration="%{idp.policy.messageLifetime:PT5M}"
    p:replayCacheName="eidas-sp-replaycache" />
      
  <bean id="eidas.SpSigningCredential" parent="shibboleth.AbstractConnectorCredential"
    p:credentialsConfig-ref="cred.sp.signing" />
        
        
  <bean id="eidas.SpPrimaryEncryptionCredential" parent="shibboleth.AbstractConnectorCredential" p:credentialsConfig-ref="cred.sp.encryption" />
  <util:list id="eidas.SpEncryptionCredentials">
    <ref bean="eidas.SpPrimaryEncryptionCredential" />
    
    <!-- <bean parent="shibboleth.AbstractConnectorCredential"
      p:credentialsConfig-ref="cred.sp.encryption" /> -->  

  </util:list>
  
  <bean id="eidas.Decrypter" class="se.elegnamnden.eidas.idp.connector.sp.impl.ExtendedSAMLObjectDecrypter" scope="singleton">
    <constructor-arg name="decryptionCredentials" ref="eidas.SpEncryptionCredentials" />
    <constructor-arg name="securityConfiguration" ref="eidas.SpSecurityConfiguration" />
    <property name="pkcs11Workaround" value="true" />
  </bean>
    
  <!-- Redis - lazy init -->
  <import resource="storage-redis.xml" />
          
</beans>
