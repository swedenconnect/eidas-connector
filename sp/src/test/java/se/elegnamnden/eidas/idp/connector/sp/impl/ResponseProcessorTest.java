/*
 * The eidas-connector project is the implementation of the Swedish eIDAS 
 * connector built on top of the Shibboleth IdP.
 *
 * More details on <https://github.com/elegnamnden/eidas-connector> 
 * Copyright (C) 2017 E-legitimationsn√§mnden
 * 
 * This program is free software: you can redistribute it and/or modify 
 * it under the terms of the GNU General Public License as published by 
 * the Free Software Foundation, either version 3 of the License, or 
 * (at your option) any later version.
 * 
 * This program is distributed in the hope that it will be useful, 
 * but WITHOUT ANY WARRANTY; without even the implied warranty of 
 * MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE. See the 
 * GNU General Public License for more details.
 * 
 * You should have received a copy of the GNU General Public License 
 * along with this program. If not, see <http://www.gnu.org/licenses/>.
 */
package se.elegnamnden.eidas.idp.connector.sp.impl;

import java.io.ByteArrayInputStream;

import org.junit.Test;
import org.opensaml.messaging.decoder.MessageDecodingException;
import org.opensaml.saml.saml2.core.Response;
import org.opensaml.saml.security.impl.SAMLSignatureProfileValidator;
import org.opensaml.xmlsec.signature.support.SignaturePrevalidator;
import org.w3c.dom.Attr;

import net.shibboleth.utilities.java.support.codec.Base64Support;
import se.elegnamnden.eidas.idp.connector.sp.TestBase;
import se.litsec.opensaml.utils.ObjectUtils;

public class ResponseProcessorTest extends TestBase {

  @Test
  public void testSignatureValidation() throws Exception {
    
    //XMLObjectProviderRegistrySupport.registerIDAttribute(Response.ID);
    
    String samlResponse = "PD94bWwgdmVyc2lvbj0iMS4wIiBlbmNvZGluZz0iVVRGLTgiPz4KPHNhbWwycDpSZXNwb25zZSBDb25zZW50PSJ1cm46b2FzaXM6bmFtZXM6dGM6U0FNTDoyLjA6Y29uc2VudDpwcmlvciIgRGVzdGluYXRpb249Imh0dHBzOi8vbG9jYWxob3N0OjkyMDAvaWRwL2V4dGF1dGgvc2FtbDIvcG9zdCIgSUQ9Il9lMmU2OTEyNTBmYWZlNjhiMWJjZjY4ZWFlZTVjYzkzNiIgSW5SZXNwb25zZVRvPSJfNzZiNDE0MGVkOTllYWY3ZTljZGEwNjIyZDIwMmE1NzUiIElzc3VlSW5zdGFudD0iMjAxNy0wOS0yN1QxODowNjoyNy4zMTVaIiBWZXJzaW9uPSIyLjAiIHhtbG5zOmVpZGFzLW5hdHVyYWw9Imh0dHA6Ly9laWRhcy5ldXJvcGEuZXUvYXR0cmlidXRlcy9uYXR1cmFscGVyc29uIiB4bWxuczpzYW1sMnA9InVybjpvYXNpczpuYW1lczp0YzpTQU1MOjIuMDpwcm90b2NvbCI+PHNhbWwyOklzc3VlciBGb3JtYXQ9InVybjpvYXNpczpuYW1lczp0YzpTQU1MOjIuMDpuYW1laWQtZm9ybWF0OmVudGl0eSIgeG1sbnM6c2FtbDI9InVybjpvYXNpczpuYW1lczp0YzpTQU1MOjIuMDphc3NlcnRpb24iPmh0dHBzOi8vZXVub2RlLmVpZGFzdGVzdC5zZS9FaWRhc05vZGUvU2VydmljZU1ldGFkYXRhPC9zYW1sMjpJc3N1ZXI+PGRzOlNpZ25hdHVyZSB4bWxuczpkcz0iaHR0cDovL3d3dy53My5vcmcvMjAwMC8wOS94bWxkc2lnIyI+CjxkczpTaWduZWRJbmZvPgo8ZHM6Q2Fub25pY2FsaXphdGlvbk1ldGhvZCBBbGdvcml0aG09Imh0dHA6Ly93d3cudzMub3JnLzIwMDEvMTAveG1sLWV4Yy1jMTRuIyIvPgo8ZHM6U2lnbmF0dXJlTWV0aG9kIEFsZ29yaXRobT0iaHR0cDovL3d3dy53My5vcmcvMjAwMS8wNC94bWxkc2lnLW1vcmUjcnNhLXNoYTI1NiIvPgo8ZHM6UmVmZXJlbmNlIFVSST0iI19lMmU2OTEyNTBmYWZlNjhiMWJjZjY4ZWFlZTVjYzkzNiI+CjxkczpUcmFuc2Zvcm1zPgo8ZHM6VHJhbnNmb3JtIEFsZ29yaXRobT0iaHR0cDovL3d3dy53My5vcmcvMjAwMC8wOS94bWxkc2lnI2VudmVsb3BlZC1zaWduYXR1cmUiLz4KPGRzOlRyYW5zZm9ybSBBbGdvcml0aG09Imh0dHA6Ly93d3cudzMub3JnLzIwMDEvMTAveG1sLWV4Yy1jMTRuIyI+PGVjOkluY2x1c2l2ZU5hbWVzcGFjZXMgUHJlZml4TGlzdD0iZWlkYXMtbmF0dXJhbCIgeG1sbnM6ZWM9Imh0dHA6Ly93d3cudzMub3JnLzIwMDEvMTAveG1sLWV4Yy1jMTRuIyIvPjwvZHM6VHJhbnNmb3JtPgo8L2RzOlRyYW5zZm9ybXM+CjxkczpEaWdlc3RNZXRob2QgQWxnb3JpdGhtPSJodHRwOi8vd3d3LnczLm9yZy8yMDAxLzA0L3htbGVuYyNzaGEyNTYiLz4KPGRzOkRpZ2VzdFZhbHVlPmRwTE51TlJmdlhNVEZGNEwweDBZQmZLVzM0VnhFTWMrREdNcVcyVGtMS0U9PC9kczpEaWdlc3RWYWx1ZT4KPC9kczpSZWZlcmVuY2U+CjwvZHM6U2lnbmVkSW5mbz4KPGRzOlNpZ25hdHVyZVZhbHVlPgpUdUllajdZelZubGsxcTVVWm12aWRKU25yWVJZM0plN0dTUjRhR3V3N1c4clJyeUlWeHdiWTZQVHc4bW9ZK2hTdmdkcmNIK3g2SDQ0Cjh5UzhMOUkzdnl1ejVNb2pmNDlKVU5ES25VK2plSlBnU2lBTXp5eWQrYjk0QnBDdWR1K21RUVpmcm5HNmdnb2o5ajFOUmVoRXluZVYKeEJyc1VnZGlUUkJaTTZ0a0RWWThNdDdSeDM5c2E3WlU2a0puNEFMMzVHZUk4YTFkYldtN2pZV3l4RHF2dENEeGwzaHB4alhYcDVLdgpqRjUwMXNRZHdmMkJ3UlhWeTBOOFVwZmlvVmdHcW1DUUNEa1FrSTlINjJ2UGtEeklmeDRHU0xpd2hNVDRIUktSR1FjZ1ZRMXNYeitTClkvaEloUDZJS29zNGsyeDQ1eFpsY0k5a05RdGFvT3F4Nzk2M3hRPT0KPC9kczpTaWduYXR1cmVWYWx1ZT4KPGRzOktleUluZm8+PGRzOlg1MDlEYXRhPjxkczpYNTA5Q2VydGlmaWNhdGU+TUlJREtUQ0NBaEVDQmdGWFIveVFEekFOQmdrcWhraUc5dzBCQVEwRkFEQllNU0F3SGdZRFZRUURFeGRUZDJWa2FYTm9JRlJsYzNRZ1pVbEVRVk1nVG05a1pURW5NQ1VHQTFVRUNoTWVVM2RsWkdsemFDQkZMVWxrWlc1MGFXWnBZMkYwYVc5dUlFSnZZWEprTVFzd0NRWURWUVFHRXdKVFJUQWVGdzB4TmpBNU1qQXhNakkxTVRaYUZ3MHlNVEE1TWpBeE5ESTFNVFphTUZneElEQWVCZ05WQkFNVEYxTjNaV1JwYzJnZ1ZHVnpkQ0JsU1VSQlV5Qk9iMlJsTVNjd0pRWURWUVFLRXg1VGQyVmthWE5vSUVVdFNXUmxiblJwWm1sallYUnBiMjRnUW05aGNtUXhDekFKQmdOVkJBWVRBbE5GTUlJQklqQU5CZ2txaGtpRzl3MEJBUUVGQUFPQ0FROEFNSUlCQ2dLQ0FRRUF0dVhyQm5HMVBuOG5lWUZ6MHNJRWQwZmxOa2tDYWFZL3VPMFFGR0dJRFBLd0VEVkE5NlYzVVRQZ3ljN2pZUm9ScS9rL2hvNHpjWkF6YzJRa3I5VVJsb3FOS3dISWNHaXo0cDRKcFpIR3lYS21BYzd4ODIycVEzK3Awc2xXOTA5TUt0Ui9QUHFFbHdiSUYxWE9PNmdzVzhQdTg0eGhqZ2tFVS85SzZDZXB1eFVJWG4ybXRvNTB0S2lwUHRNQWJ2UlVnbFpZeVpqM2ZUYnpOVzZIMGNCa09rRkUzYU5NT2I4Zm5LcEEyVXdSa1lMY2dpR2tVZ0EwTHVYWlpGbSt0NXk2Q29qWXc1dUNKQytxcTlmdTl6WjRreUppTzY3cGo4eVEwSVpuYkgydFVhbFlCUnlGa3ZQU29TREMzMnlWNFNGK0F3dzI1cjNPT1g2SjVsOTkxRFlHSndJREFRQUJNQTBHQ1NxR1NJYjNEUUVCRFFVQUE0SUJBUUNpMUdyc2Q2TVFwZEs0SjFyUjRiSTNVT252aFVRcE51S3o5a0poVE9leDBnRGRGM1pnQm95cGRTVE5objhKb0dtRmhHRVNoaGlJanRQbTFSeU95RGl6YXc3YUdBbkN1LzhWQXB5aVNzNUlLdFF1cUNIUXdJRFRoRjdkQ0tuUW1STnZqVUJjRGFtek5mWlhNdDBubHlCL3JnU21QTHJmcXJ3MSsxRGg0RlJueHdtODdqOVoyZ04yZS9xdC9kd3pQaG5KaFBmYTFqc1BzM3lINzFDZ1FFOWkzSEUrRzVQcFVCRG5EWEhBUmhWUHk5NjZUTDkzOXgwS3JMSnJLeTYyZ2JVK0ErYmI3QVlETkRmN2tLMTF2b3hvbXU3NEEzRTVVSnJ4VlN2Ny9xUmNycTBKVDMzY1dVZlJFdm1tQkpZMzRDWnF6MEN6N29XNDBMSDBuNktMK2tpeTwvZHM6WDUwOUNlcnRpZmljYXRlPjwvZHM6WDUwOURhdGE+PC9kczpLZXlJbmZvPjwvZHM6U2lnbmF0dXJlPjxzYW1sMnA6U3RhdHVzPjxzYW1sMnA6U3RhdHVzQ29kZSBWYWx1ZT0idXJuOm9hc2lzOm5hbWVzOnRjOlNBTUw6Mi4wOnN0YXR1czpTdWNjZXNzIi8+PHNhbWwycDpTdGF0dXNNZXNzYWdlPnVybjpvYXNpczpuYW1lczp0YzpTQU1MOjIuMDpzdGF0dXM6U3VjY2Vzczwvc2FtbDJwOlN0YXR1c01lc3NhZ2U+PC9zYW1sMnA6U3RhdHVzPjxzYW1sMjpBc3NlcnRpb24gSUQ9Il9lMmU2OTEyNTBmYWZlNjhiMWJjZjY4ZWFlZTVjYzkzNiIgSXNzdWVJbnN0YW50PSIyMDE3LTA5LTI3VDE4OjA2OjI3LjMxNVoiIFZlcnNpb249IjIuMCIgeG1sbnM6ZWlkYXMtbmF0dXJhbD0iaHR0cDovL2VpZGFzLmV1cm9wYS5ldS9hdHRyaWJ1dGVzL25hdHVyYWxwZXJzb24iIHhtbG5zOnNhbWwyPSJ1cm46b2FzaXM6bmFtZXM6dGM6U0FNTDoyLjA6YXNzZXJ0aW9uIj48c2FtbDI6SXNzdWVyIEZvcm1hdD0idXJuOm9hc2lzOm5hbWVzOnRjOlNBTUw6Mi4wOm5hbWVpZC1mb3JtYXQ6ZW50aXR5Ij5odHRwczovL2V1bm9kZS5laWRhc3Rlc3Quc2UvRWlkYXNOb2RlL1NlcnZpY2VNZXRhZGF0YTwvc2FtbDI6SXNzdWVyPjxkczpTaWduYXR1cmUgeG1sbnM6ZHM9Imh0dHA6Ly93d3cudzMub3JnLzIwMDAvMDkveG1sZHNpZyMiPgo8ZHM6U2lnbmVkSW5mbz4KPGRzOkNhbm9uaWNhbGl6YXRpb25NZXRob2QgQWxnb3JpdGhtPSJodHRwOi8vd3d3LnczLm9yZy8yMDAxLzEwL3htbC1leGMtYzE0biMiLz4KPGRzOlNpZ25hdHVyZU1ldGhvZCBBbGdvcml0aG09Imh0dHA6Ly93d3cudzMub3JnLzIwMDEvMDQveG1sZHNpZy1tb3JlI3JzYS1zaGEyNTYiLz4KPGRzOlJlZmVyZW5jZSBVUkk9IiNfZTJlNjkxMjUwZmFmZTY4YjFiY2Y2OGVhZWU1Y2M5MzYiPgo8ZHM6VHJhbnNmb3Jtcz4KPGRzOlRyYW5zZm9ybSBBbGdvcml0aG09Imh0dHA6Ly93d3cudzMub3JnLzIwMDAvMDkveG1sZHNpZyNlbnZlbG9wZWQtc2lnbmF0dXJlIi8+CjxkczpUcmFuc2Zvcm0gQWxnb3JpdGhtPSJodHRwOi8vd3d3LnczLm9yZy8yMDAxLzEwL3htbC1leGMtYzE0biMiPjxlYzpJbmNsdXNpdmVOYW1lc3BhY2VzIFByZWZpeExpc3Q9ImVpZGFzLW5hdHVyYWwiIHhtbG5zOmVjPSJodHRwOi8vd3d3LnczLm9yZy8yMDAxLzEwL3htbC1leGMtYzE0biMiLz48L2RzOlRyYW5zZm9ybT4KPC9kczpUcmFuc2Zvcm1zPgo8ZHM6RGlnZXN0TWV0aG9kIEFsZ29yaXRobT0iaHR0cDovL3d3dy53My5vcmcvMjAwMS8wNC94bWxlbmMjc2hhMjU2Ii8+CjxkczpEaWdlc3RWYWx1ZT5jSW1XTC9IRFdVWXhnTUY2UWNCclBxVm5XYjNwUWtsRm5pczQvV3hnREpJPTwvZHM6RGlnZXN0VmFsdWU+CjwvZHM6UmVmZXJlbmNlPgo8L2RzOlNpZ25lZEluZm8+CjxkczpTaWduYXR1cmVWYWx1ZT4KclNRSnFMVWZRVjBjM2F4NFRjdXRKNzZzY1d1b2hwWlpnVWVmblFFb1ZHcGVQdm1pR29Ra3BicElSRjgyK3lnMFZOczVSY2pBQ3BVUwpGNGdIcDA4dGVDcWJTVmtyVDFybDRGNDJjbDVGSzJraStIdmkxM2h1MGVMa2VqWlNZRGFuMkI3SGFNV0xVTjdBWkFoTEFiMWxaYW1kCnNPaTFtL3l2TTVuSDR6U1dwU28xL1dmak81eGt3S2c2dGloR3lQSmlkaFdHWHNSK0xYb1h4dmxIV1N2TkxMTDF5SGpwUFRFdndteGQKV1lxQkZXVStvNE42V1Nsb0hBa0JwQThtMStkMlN4MkVyOUNYbTE1K2VQR1lLNVFDRm9mSHNoWWtPc251SEFSNW1CM1dBZEtZcW1ieQpSdkNPTzhXbS9TdzJLaHRyTnpwdmxqb3h4Y25yeitmOVRDT2Mzdz09CjwvZHM6U2lnbmF0dXJlVmFsdWU+CjxkczpLZXlJbmZvPjxkczpYNTA5RGF0YT48ZHM6WDUwOUNlcnRpZmljYXRlPk1JSURLVENDQWhFQ0JnRlhSL3lRRHpBTkJna3Foa2lHOXcwQkFRMEZBREJZTVNBd0hnWURWUVFERXhkVGQyVmthWE5vSUZSbGMzUWdaVWxFUVZNZ1RtOWtaVEVuTUNVR0ExVUVDaE1lVTNkbFpHbHphQ0JGTFVsa1pXNTBhV1pwWTJGMGFXOXVJRUp2WVhKa01Rc3dDUVlEVlFRR0V3SlRSVEFlRncweE5qQTVNakF4TWpJMU1UWmFGdzB5TVRBNU1qQXhOREkxTVRaYU1GZ3hJREFlQmdOVkJBTVRGMU4zWldScGMyZ2dWR1Z6ZENCbFNVUkJVeUJPYjJSbE1TY3dKUVlEVlFRS0V4NVRkMlZrYVhOb0lFVXRTV1JsYm5ScFptbGpZWFJwYjI0Z1FtOWhjbVF4Q3pBSkJnTlZCQVlUQWxORk1JSUJJakFOQmdrcWhraUc5dzBCQVFFRkFBT0NBUThBTUlJQkNnS0NBUUVBdHVYckJuRzFQbjhuZVlGejBzSUVkMGZsTmtrQ2FhWS91TzBRRkdHSURQS3dFRFZBOTZWM1VUUGd5YzdqWVJvUnEvay9obzR6Y1pBemMyUWtyOVVSbG9xTkt3SEljR2l6NHA0SnBaSEd5WEttQWM3eDgyMnFRMytwMHNsVzkwOU1LdFIvUFBxRWx3YklGMVhPTzZnc1c4UHU4NHhoamdrRVUvOUs2Q2VwdXhVSVhuMm10bzUwdEtpcFB0TUFidlJVZ2xaWXlaajNmVGJ6Tlc2SDBjQmtPa0ZFM2FOTU9iOGZuS3BBMlV3UmtZTGNnaUdrVWdBMEx1WFpaRm0rdDV5NkNvall3NXVDSkMrcXE5ZnU5elo0a3lKaU82N3BqOHlRMElabmJIMnRVYWxZQlJ5Rmt2UFNvU0RDMzJ5VjRTRitBd3cyNXIzT09YNko1bDk5MURZR0p3SURBUUFCTUEwR0NTcUdTSWIzRFFFQkRRVUFBNElCQVFDaTFHcnNkNk1RcGRLNEoxclI0YkkzVU9udmhVUXBOdUt6OWtKaFRPZXgwZ0RkRjNaZ0JveXBkU1ROaG44Sm9HbUZoR0VTaGhpSWp0UG0xUnlPeURpemF3N2FHQW5DdS84VkFweWlTczVJS3RRdXFDSFF3SURUaEY3ZENLblFtUk52alVCY0RhbXpOZlpYTXQwbmx5Qi9yZ1NtUExyZnFydzErMURoNEZSbnh3bTg3ajlaMmdOMmUvcXQvZHd6UGhuSmhQZmExanNQczN5SDcxQ2dRRTlpM0hFK0c1UHBVQkRuRFhIQVJoVlB5OTY2VEw5Mzl4MEtyTEpyS3k2MmdiVStBK2JiN0FZRE5EZjdrSzExdm94b211NzRBM0U1VUpyeFZTdjcvcVJjcnEwSlQzM2NXVWZSRXZtbUJKWTM0Q1pxejBDejdvVzQwTEgwbjZLTCtraXk8L2RzOlg1MDlDZXJ0aWZpY2F0ZT48L2RzOlg1MDlEYXRhPjwvZHM6S2V5SW5mbz48L2RzOlNpZ25hdHVyZT48c2FtbDI6U3ViamVjdD48c2FtbDI6TmFtZUlEIEZvcm1hdD0idXJuOm9hc2lzOm5hbWVzOnRjOlNBTUw6Mi4wOm5hbWVpZC1mb3JtYXQ6cGVyc2lzdGVudCIgTmFtZVF1YWxpZmllcj0iaHR0cHM6Ly9ldW5vZGUuZWlkYXN0ZXN0LnNlL0VpZGFzTm9kZS9TZXJ2aWNlTWV0YWRhdGEiPlNFL1NFLzE5NzMwOTA2OTI4OTwvc2FtbDI6TmFtZUlEPjxzYW1sMjpTdWJqZWN0Q29uZmlybWF0aW9uIE1ldGhvZD0idXJuOm9hc2lzOm5hbWVzOnRjOlNBTUw6Mi4wOmNtOmJlYXJlciI+PHNhbWwyOlN1YmplY3RDb25maXJtYXRpb25EYXRhIEFkZHJlc3M9IjA6MDowOjA6MDowOjA6MSIgSW5SZXNwb25zZVRvPSJfNzZiNDE0MGVkOTllYWY3ZTljZGEwNjIyZDIwMmE1NzUiIE5vdE9uT3JBZnRlcj0iMjAxNy0wOS0yN1QxODoxMToyNy4zMTVaIiBSZWNpcGllbnQ9Imh0dHBzOi8vbG9jYWxob3N0OjkyMDAvaWRwL2V4dGF1dGgvc2FtbDIvcG9zdCIvPjwvc2FtbDI6U3ViamVjdENvbmZpcm1hdGlvbj48L3NhbWwyOlN1YmplY3Q+PHNhbWwyOkNvbmRpdGlvbnMgTm90QmVmb3JlPSIyMDE3LTA5LTI3VDE4OjA2OjEyLjMxNVoiIE5vdE9uT3JBZnRlcj0iMjAxNy0wOS0yN1QxODoxMToyNy4zMTVaIj48c2FtbDI6QXVkaWVuY2VSZXN0cmljdGlvbj48c2FtbDI6QXVkaWVuY2U+aHR0cHM6Ly9ldW5vZGUuZWlkYXN0ZXN0LnNlL2Nvbm5lY3Rvci1zcDwvc2FtbDI6QXVkaWVuY2U+PC9zYW1sMjpBdWRpZW5jZVJlc3RyaWN0aW9uPjxzYW1sMjpPbmVUaW1lVXNlLz48L3NhbWwyOkNvbmRpdGlvbnM+PHNhbWwyOkF1dGhuU3RhdGVtZW50IEF1dGhuSW5zdGFudD0iMjAxNy0wOS0yN1QxODowNjoyNy4zMTVaIj48c2FtbDI6U3ViamVjdExvY2FsaXR5IEFkZHJlc3M9IjA6MDowOjA6MDowOjA6MSIvPjxzYW1sMjpBdXRobkNvbnRleHQ+PHNhbWwyOkF1dGhuQ29udGV4dENsYXNzUmVmPmh0dHA6Ly9laWRhcy5ldXJvcGEuZXUvTG9BL3N1YnN0YW50aWFsPC9zYW1sMjpBdXRobkNvbnRleHRDbGFzc1JlZj48L3NhbWwyOkF1dGhuQ29udGV4dD48L3NhbWwyOkF1dGhuU3RhdGVtZW50PjxzYW1sMjpBdHRyaWJ1dGVTdGF0ZW1lbnQ+PHNhbWwyOkF0dHJpYnV0ZSBGcmllbmRseU5hbWU9IlBlcnNvbklkZW50aWZpZXIiIE5hbWU9Imh0dHA6Ly9laWRhcy5ldXJvcGEuZXUvYXR0cmlidXRlcy9uYXR1cmFscGVyc29uL1BlcnNvbklkZW50aWZpZXIiIE5hbWVGb3JtYXQ9InVybjpvYXNpczpuYW1lczp0YzpTQU1MOjIuMDphdHRybmFtZS1mb3JtYXQ6dXJpIj48c2FtbDI6QXR0cmlidXRlVmFsdWUgeG1sbnM6eHNpPSJodHRwOi8vd3d3LnczLm9yZy8yMDAxL1hNTFNjaGVtYS1pbnN0YW5jZSIgeHNpOnR5cGU9ImVpZGFzLW5hdHVyYWw6UGVyc29uSWRlbnRpZmllclR5cGUiPlNFL1NFLzE5NzMwOTA2OTI4OTwvc2FtbDI6QXR0cmlidXRlVmFsdWU+PC9zYW1sMjpBdHRyaWJ1dGU+PHNhbWwyOkF0dHJpYnV0ZSBGcmllbmRseU5hbWU9IkRhdGVPZkJpcnRoIiBOYW1lPSJodHRwOi8vZWlkYXMuZXVyb3BhLmV1L2F0dHJpYnV0ZXMvbmF0dXJhbHBlcnNvbi9EYXRlT2ZCaXJ0aCIgTmFtZUZvcm1hdD0idXJuOm9hc2lzOm5hbWVzOnRjOlNBTUw6Mi4wOmF0dHJuYW1lLWZvcm1hdDp1cmkiPjxzYW1sMjpBdHRyaWJ1dGVWYWx1ZSB4bWxuczp4c2k9Imh0dHA6Ly93d3cudzMub3JnLzIwMDEvWE1MU2NoZW1hLWluc3RhbmNlIiB4c2k6dHlwZT0iZWlkYXMtbmF0dXJhbDpEYXRlT2ZCaXJ0aFR5cGUiPjE5NzMtMDktMDY8L3NhbWwyOkF0dHJpYnV0ZVZhbHVlPjwvc2FtbDI6QXR0cmlidXRlPjxzYW1sMjpBdHRyaWJ1dGUgRnJpZW5kbHlOYW1lPSJGYW1pbHlOYW1lIiBOYW1lPSJodHRwOi8vZWlkYXMuZXVyb3BhLmV1L2F0dHJpYnV0ZXMvbmF0dXJhbHBlcnNvbi9DdXJyZW50RmFtaWx5TmFtZSIgTmFtZUZvcm1hdD0idXJuOm9hc2lzOm5hbWVzOnRjOlNBTUw6Mi4wOmF0dHJuYW1lLWZvcm1hdDp1cmkiPjxzYW1sMjpBdHRyaWJ1dGVWYWx1ZSB4bWxuczp4c2k9Imh0dHA6Ly93d3cudzMub3JnLzIwMDEvWE1MU2NoZW1hLWluc3RhbmNlIiB4c2k6dHlwZT0iZWlkYXMtbmF0dXJhbDpDdXJyZW50RmFtaWx5TmFtZVR5cGUiPkdyZWdlcjwvc2FtbDI6QXR0cmlidXRlVmFsdWU+PC9zYW1sMjpBdHRyaWJ1dGU+PHNhbWwyOkF0dHJpYnV0ZSBGcmllbmRseU5hbWU9IkZpcnN0TmFtZSIgTmFtZT0iaHR0cDovL2VpZGFzLmV1cm9wYS5ldS9hdHRyaWJ1dGVzL25hdHVyYWxwZXJzb24vQ3VycmVudEdpdmVuTmFtZSIgTmFtZUZvcm1hdD0idXJuOm9hc2lzOm5hbWVzOnRjOlNBTUw6Mi4wOmF0dHJuYW1lLWZvcm1hdDp1cmkiPjxzYW1sMjpBdHRyaWJ1dGVWYWx1ZSB4bWxuczp4c2k9Imh0dHA6Ly93d3cudzMub3JnLzIwMDEvWE1MU2NoZW1hLWluc3RhbmNlIiB4c2k6dHlwZT0iZWlkYXMtbmF0dXJhbDpDdXJyZW50R2l2ZW5OYW1lVHlwZSI+TmluYS1Nb2NrdXA8L3NhbWwyOkF0dHJpYnV0ZVZhbHVlPjwvc2FtbDI6QXR0cmlidXRlPjxzYW1sMjpBdHRyaWJ1dGUgRnJpZW5kbHlOYW1lPSJHZW5kZXIiIE5hbWU9Imh0dHA6Ly9laWRhcy5ldXJvcGEuZXUvYXR0cmlidXRlcy9uYXR1cmFscGVyc29uL0dlbmRlciIgTmFtZUZvcm1hdD0idXJuOm9hc2lzOm5hbWVzOnRjOlNBTUw6Mi4wOmF0dHJuYW1lLWZvcm1hdDp1cmkiPjxzYW1sMjpBdHRyaWJ1dGVWYWx1ZSB4bWxuczp4c2k9Imh0dHA6Ly93d3cudzMub3JnLzIwMDEvWE1MU2NoZW1hLWluc3RhbmNlIiB4c2k6dHlwZT0iZWlkYXMtbmF0dXJhbDpHZW5kZXJUeXBlIj5GZW1hbGU8L3NhbWwyOkF0dHJpYnV0ZVZhbHVlPjwvc2FtbDI6QXR0cmlidXRlPjwvc2FtbDI6QXR0cmlidXRlU3RhdGVtZW50Pjwvc2FtbDI6QXNzZXJ0aW9uPjwvc2FtbDJwOlJlc3BvbnNlPg==";
//    String cert = "MIIDKTCCAhECBgFXR/yQDzANBgkqhkiG9w0BAQ0FADBYMSAwHgYDVQQDExdTd2VkaXNoIFRlc3QgZUlEQVMgTm9kZTEnMCUGA1UEChMeU3dlZGlzaCBFLUlkZW50aWZpY2F0aW9uIEJvYXJkMQswCQYDVQQGEwJTRTAeFw0xNjA5MjAxMjI1MTZaFw0yMTA5MjAxNDI1MTZaMFgxIDAeBgNVBAMTF1N3ZWRpc2ggVGVzdCBlSURBUyBOb2RlMScwJQYDVQQKEx5Td2VkaXNoIEUtSWRlbnRpZmljYXRpb24gQm9hcmQxCzAJBgNVBAYTAlNFMIIBIjANBgkqhkiG9w0BAQEFAAOCAQ8AMIIBCgKCAQEAtuXrBnG1Pn8neYFz0sIEd0flNkkCaaY/uO0QFGGIDPKwEDVA96V3UTPgyc7jYRoRq/k/ho4zcZAzc2Qkr9URloqNKwHIcGiz4p4JpZHGyXKmAc7x822qQ3+p0slW909MKtR/PPqElwbIF1XOO6gsW8Pu84xhjgkEU/9K6CepuxUIXn2mto50tKipPtMAbvRUglZYyZj3fTbzNW6H0cBkOkFE3aNMOb8fnKpA2UwRkYLcgiGkUgA0LuXZZFm+t5y6CojYw5uCJC+qq9fu9zZ4kyJiO67pj8yQ0IZnbH2tUalYBRyFkvPSoSDC32yV4SF+Aww25r3OOX6J5l991DYGJwIDAQABMA0GCSqGSIb3DQEBDQUAA4IBAQCi1Grsd6MQpdK4J1rR4bI3UOnvhUQpNuKz9kJhTOex0gDdF3ZgBoypdSTNhn8JoGmFhGEShhiIjtPm1RyOyDizaw7aGAnCu/8VApyiSs5IKtQuqCHQwIDThF7dCKnQmRNvjUBcDamzNfZXMt0nlyB/rgSmPLrfqrw1+1Dh4FRnxwm87j9Z2gN2e/qt/dwzPhnJhPfa1jsPs3yH71CgQE9i3HE+G5PpUBDnDXHARhVPy966TL939x0KrLJrKy62gbU+A+bb7AYDNDf7kK11voxomu74A3E5UJrxVSv7/qRcrq0JT33cWUfREvmmBJY34CZqz0Cz7oW40LH0n6KL+kiy";
//   
//    Credential certCred = new BasicX509Credential(
//      X509CertificateUtils.decodeCertificate(new ByteArrayInputStream(Base64.getDecoder().decode(cert))));
//    CollectionKeyInfoCredentialResolver resolver = new CollectionKeyInfoCredentialResolver(Arrays.asList(certCred));
    
    final byte[] decodedBytes = Base64Support.decode(samlResponse);
    if (decodedBytes == null) {
      throw new MessageDecodingException("Unable to Base64 decode SAML response message");
    }
    Response response = ObjectUtils.unmarshall(new ByteArrayInputStream(decodedBytes), Response.class);
    Attr attr = response.getDOM().getAttributeNode("ID");
    attr.getOwnerElement().setIdAttributeNode(attr, true);
    
    SignaturePrevalidator signatureProfileValidator = new SAMLSignatureProfileValidator();
    signatureProfileValidator.validate(response.getSignature());
    
  }
  
}
